iam:
withOIDC: true
podIdentityAssociations:
- namespace: "kube-system"
serviceAccountName: karpenter
roleName: wsi-eks-karpenter
permissionPolicyARNs:
- arn:aws:iam::690677342176:policy/KarpenterControllerPolicy-wsi-eks

iamIdentityMappings:
- arn: "arn:aws:iam::690677342176:role/KarpenterNodeRole-wsi-eks"
username: system:node:{{EC2PrivateDNSName}}
groups:
- system:bootstrappers
- system:nodes



cat <<EOF | envsubst | kubectl apply -f -
apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: default
spec:
  template:
    spec:
      requirements:
        - key: kubernetes.io/arch
          operator: In
          values: ["amd64"]
        - key: kubernetes.io/os
          operator: In
          values: ["linux"]
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["on-demand"]
        - key: karpenter.k8s.aws/instance-category
          operator: In
          values: ["t"]
        - key: node.kubernetes.io/instance-type
          operator: In
          values: ["t3.micro"]
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: default
      expireAfter: 720h # 30 * 24h = 720h
  limits:
    cpu: 1000
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 1m
---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: default
spec:
  kubelet:
    maxPods: 7
  amiFamily: Bottlerocket
  role: "KarpenterNodeRole-wsi-eks-cluster" # replace with your cluster name
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: "wsi-eks-cluster" # replace with your cluster name
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: "wsi-eks-cluster" # replace with your cluster name
  amiSelectorTerms:
    - id: "ami-0f40c2c2401518426"
EOF








